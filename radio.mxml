<?xml version="1.0" encoding="utf-8"?>
<mx:Application
       xmlns:fx="http://ns.adobe.com/mxml/2009"
       xmlns:s="library://ns.adobe.com/flex/spark"
       xmlns:mx="library://ns.adobe.com/flex/mx"
       initialize="init()"
       width="650"
       height="450"
       horizontalScrollPolicy="off"
       verticalScrollPolicy="off"
       paddingTop="0"
       paddingBottom="0"
       paddingLeft="0"
       paddingRight="0">

  <fx:Script>
    <![CDATA[

      import flash.events.Event;
      import flash.events.IOErrorEvent;
      import flash.events.MouseEvent;
      import flash.events.ProgressEvent;
      import flash.events.TimerEvent;
      import flash.media.Sound;
      import flash.media.SoundChannel;
      import flash.media.SoundTransform;
      import flash.net.URLRequest;
      import flash.utils.Timer;
      import flash.external.ExternalInterface;

      import mx.controls.Alert;
      import mx.events.FlexEvent;

      private var audioLoader:URLLoader;
      private var xmlLoader:URLLoader;
      private var xmlResponse:XML;
      private var plsLines:Array;

      private function init():void {
        requestStation();
      }

      private function consoleLog(message:String):void {
        if (ExternalInterface.available){
          message = "[radio] " + message;
          ExternalInterface.call("console.log", message);
          ExternalInterface.call("debugLog", message);
        }
      }

      private function requestStation():void {
        var stationUrl:String = "http://api.npr.org/stations?callLetters=WAMU&apiKey=MDExMTEwNDYyMDEzNjQzMzg5ODMzYzdlMA001";
        xmlLoader = new URLLoader();
        xmlLoader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
        xmlLoader.addEventListener(ProgressEvent.PROGRESS, progressHandler);
        xmlLoader.addEventListener(Event.COMPLETE, xmlComplete);

        var request:URLRequest = new URLRequest(stationUrl);
        loadSomething(xmlLoader, request);
      }

      public function loadSound(url:String):void{
        var mySound = new Sound();
        mySound.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
        mySound.addEventListener(ProgressEvent.PROGRESS, progressHandler);

        var request:URLRequest = new URLRequest(url);
        mySound.load(request);
        mySound.play();
      }

      private function loadSomething(loadie, request):void {
        try {
          loadie.load(request);
        } catch (error:Error) {
          consoleLog("Unable to load requested document. " + error.message);
        }
      }

      private function xmlComplete(event:Event):void {
        var xmlLoadie:URLLoader = URLLoader(event.target);
        xmlResponse = new XML(xmlLoadie.data);
        // loadSound();
      }

      private function plsLoaded(event:Event):void {
        var mp3FileUrl:String;
        plsLines = event.target.data.split(/\n/);
        for (var i:int=0; i<plsLines.length; i++){
          var element:String = plsLines[i];
          if (element.search("File1") >= 0) {
            mp3FileUrl = element.substr(6);
            break;
          }
        }
        loadSound(mp3FileUrl);
      }

      private function configureListeners(dispatcher:IEventDispatcher):void {
          //dispatcher.addEventListener(Event.COMPLETE, completeHandler);
          dispatcher.addEventListener(Event.OPEN, openHandler);
          dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
          dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
          dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
          dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
      }

      private function completeHandler(event:Event):void {
          var loader:URLLoader = URLLoader(event.target);
          consoleLog("completeHandler: " + loader.data);
      }

      private function openHandler(event:Event):void {
          consoleLog("openHandler: " + event);
      }

      private function progressHandler(event:ProgressEvent):void {

          consoleLog("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
      }

      private function securityErrorHandler(event:SecurityErrorEvent):void {
          consoleLog("securityErrorHandler: " + event);
      }

      private function httpStatusHandler(event:HTTPStatusEvent):void {
          consoleLog("httpStatusHandler: " + event);
      }

      private function errorHandler(event:IOErrorEvent):void {
          consoleLog("errorHandler: " + event);
      }

      private function ioErrorHandler(event:IOErrorEvent):void {
          consoleLog("ioErrorHandler: " + event);
      }
    ]]>
  </fx:Script>
 </mx:Application>